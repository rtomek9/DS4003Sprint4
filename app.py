# -*- coding: utf-8 -*-
"""Sprint4-DS4003.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xWXYywUEmQmDjop5o8gcb24IwLnIlwKT
"""

!pip install dash

import pandas as pd
import numpy as np
import plotly.express as px
from dash import Dash, dcc, html, Input, Output, callback
from datetime import date
import pandas as pd
import plotly.graph_objects as go

df = pd.read_csv('mydata2.csv')
rad_columns = ["stability",	"rights",	"health",	"safety",	"climate",	"cost",	"popularity"]
range = [0,10,20,30,40,50,60,70,80,90,100]

# initialize app
external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
app = Dash(__name__, external_stylesheets=external_stylesheets)
server = app.server
# define layout and elements
app.layout = html.Div([
    html.H2("Oh the Places You'll Go!"),
    html.P("The following data come from a variety of reputable sources "
           "for each different metric: Some are from the World Bank, other metrics "
           "are compiled from the United Nations, and others are taken from the "
           "Institute for Economics & Peace. The dataset has then been uploaded "
           "to Kaggle and is now accessible to all Kaggle users."),
    html.H4("Select the Dates of Arrival & Departure"),
    html.Div([
    dcc.DatePickerRange(
        id='date-picker-range',
        start_date=date(2024, 4, 3),
        end_date_placeholder_text='Select a date'
    )
]),
    html.H4("Select up to two countries"),
    dcc.Dropdown(
                    id='country-dropdown',
                   options=[{'label': country, 'value': country} for country in df['country']],
                    value=df['country'][:2],  # Pre-select the first two countries
                    multi=True  # Set multi attribute to True
                ),
        html.Div([
        dcc.Graph(id='polar-plot', figure={})
    ], style={'display': 'inline-block', 'width': '50%'}),
    html.Div([
        dcc.Graph(id='bar-chart', figure={}),
    ], style={'display': 'inline-block', 'width': '50%'}),
    html.Div(id='country-info')
])

@app.callback(
   [Output('polar-plot', 'figure'),
    Output('bar-chart', 'figure')],
   Input('country-dropdown', 'value')
)

def update_plot(selected_countries):
    traces = []
    if len(selected_countries) <= 2:
        for country in selected_countries:
            country_data = df[df['country'] == country]
            values = country_data[rad_columns].values.flatten().tolist()
            traces.append(go.Scatterpolar(
                r=values,
                theta=rad_columns,
                fill='toself',
                name=country
            ))
        layout = go.Layout(
              polar=dict(
                 radialaxis=dict(
                    visible=True,
                    range=[0, 100]
                )),
            showlegend=True
        )
        fig = go.Figure(data=traces, layout=layout)
    else:
        fig = go.Figure()
        fig.add_annotation(text="Please select up to two countries", showarrow=False,
                           xref='paper', yref='paper', x=0.5, y=0.5, font_size=20)
    bar_traces = []
    for category in rad_columns:
        category_values = df[df['country'].isin(selected_countries)][category]
        bar_traces.append(go.Bar(
            x=selected_countries,
            y=category_values,
            name=category
        ))
    bar_layout = go.Layout(
        barmode='stack',
        xaxis=dict(title='Country'),
        yaxis=dict(title='Value')
    )
    bar_fig = go.Figure(data=bar_traces, layout=bar_layout)
    return fig, bar_fig

@app.callback(
    Output('country-info', 'children'),
    Input('country-dropdown', 'value')
)
def update_country_info(selected_countries):
    info = []
    for country in selected_countries:
        country_data = df[df['country'] == country]
        max_value = country_data[rad_columns].max().idxmax()  # Get column name with max value
        min_value = country_data[rad_columns].min().idxmin()  # Get column name with min value
        info.append(html.Div([
            html.H3(country),
            html.P(f"Strength: {max_value} ({country_data[max_value].max()})"),
            html.P(f"Weakness: {min_value} ({country_data[min_value].min()})")
        ]))
    return info

# run app
if __name__ == '__main__':
    app.run(jupyter_mode='external', debug=True)
